# -*- coding: utf-8 -*-
"""Assignment_1 _Q1_ML

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xgiPd38tqehDnetZUlLpELU9lVmO1NSB

# Predicting Price of House using KNearestNeighbour Regressor

# 1.Use pandas to get some insights into the data (10 marks)
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/house_rental_data.txt")
df.drop('Unnamed: 0', axis=1, inplace=True)
df.head()

df.info()

df.describe()

df["Floor"].values

df["Bathroom"].value_counts()

df.isnull().sum()

df.dtypes





df[df.duplicated()]

df.duplicated().sum()

df.shape

df.columns

df.index

df.sort_values(by=['Floor'], inplace=True)

df['Floor'].unique() # checking unique values in floor column











"""# 2.Show some interesting visualization of the data (10 marks)"""

df.plot()

sns.pairplot(df)

df.plot.pie(subplots=True, figsize=(15, 15))

sns.jointplot(x='Price', y='Living.Room', data=df)

# heatmap

# it is used to see a co-relation.

corr = df.corr()
sns.heatmap(corr, annot=True, cmap='cool')

import sklearn
from sklearn.model_selection import train_test_split

x = df.drop('Price', axis=1).values  # independent variable
y = df['Price'].values     #dependent
x

x_train, x_test, y_train, y_test = train_test_split( x, y, test_size = .20, random_state=1)

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier()
knn.fit(x_train, y_train)

knn.score(x_test, y_test)

x.shape

x_train.shape

y_train.shape

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error
from math import ceil, sqrt

knr = KNeighborsRegressor()
knr.fit(x_train, y_train)

y_pred = knr.predict(x_test)

sqrt(mean_squared_error(y_true = y_test, y_pred = y_pred))

c = ceil(sqrt(df.shape[0]))
c

for i in range(0, c+1):
    model = KNeighborsRegressor()
    model.fit(x_train, y_train)
    y_test_pred = model.predict(x_test)
    error = sqrt(mean_squared_error(y_test, y_test_pred))
    print(i , error)

